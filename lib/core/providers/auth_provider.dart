import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import '../models/user.dart';
import '../auth/jwt_storage.dart';
import '../services/auth_service.dart';
import '../services/two_factor_service.dart' hide User;
import 'package:local_auth/local_auth.dart';

// Storage provider
final secureStorageProvider = Provider<FlutterSecureStorage>((ref) {
  return const FlutterSecureStorage(
    aOptions: AndroidOptions(
      encryptedSharedPreferences: true,
    ),
  );
});

// Auth state
class AuthState {
  final User? user;
  final String? token;
  final bool isLoading;
  final String? error;

  const AuthState({
    this.user,
    this.token,
    this.isLoading = false,
    this.error,
  });

  AuthState copyWith({
    User? user,
    String? token,
    bool? isLoading,
    String? error,
  }) {
    return AuthState(
      user: user ?? this.user,
      token: token ?? this.token,
      isLoading: isLoading ?? this.isLoading,
      error: error ?? this.error,
    );
  }

  bool get isAuthenticated => user != null && token != null;
}

// Auth notifier
class AuthNotifier extends StateNotifier<AuthState> {
  final FlutterSecureStorage _storage;

  AuthNotifier(this._storage) : super(const AuthState());

  static const String _tokenKey = 'auth_token';
  static const String _userKey = 'auth_user';

  Future<void> initialize() async {
    state = state.copyWith(isLoading: true);
    
    try {
      // Try to get token from AuthProvider storage first
      String? token = await _storage.read(key: _tokenKey);
      final userJson = await _storage.read(key: _userKey);
      
      // If not found, try JwtStorage
      token ??= await JwtStorage.getToken();
      
      if (token != null && userJson != null) {
        // Verify token is still valid
        try {
          final user = await AuthService.getProfile(token);
          state = AuthState(user: user, token: token);
          
          // Sync to both storages
          await _storage.write(key: _tokenKey, value: token);
          await _storage.write(key: _userKey, value: user.toJson().toString());
          await JwtStorage.saveToken(token);
          await JwtStorage.saveUserId(user.userId);
        } catch (e) {
          // Token invalid, clear both storages
          await logout();
        }
      } else if (token != null) {
        // Have token but no user data, try to get user
        try {
          final user = await AuthService.getProfile(token);
          state = AuthState(user: user, token: token);
          
          // Save to both storages
          await _storage.write(key: _tokenKey, value: token);
          await _storage.write(key: _userKey, value: user.toJson().toString());
          await JwtStorage.saveToken(token);
          await JwtStorage.saveUserId(user.userId);
        } catch (e) {
          // Token invalid, clear both storages
          await logout();
        }
      } else {
        state = const AuthState();
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: 'L·ªói khi kh·ªüi t·∫°o: ${e.toString()}',
      );
    }
  }

  Future<void> login(String email, String password) async {
    state = state.copyWith(isLoading: true, error: null);
    
    try {
      final request = LoginRequest(email: email, password: password);
      final response = await AuthService.login(request);
      
      // Save to both secure storage systems for compatibility
      await _storage.write(key: _tokenKey, value: response.token);
      await _storage.write(key: _userKey, value: response.user.toJson().toString());
      
      // Also save to JwtStorage for backend service compatibility
      await JwtStorage.saveToken(response.token);
      await JwtStorage.saveUserId(response.user.userId);
      
      state = AuthState(
        user: response.user,
        token: response.token,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }

  Future<bool> register({required String email, required String password, String? fullName}) async {
    state = state.copyWith(isLoading: true, error: null);
    
    try {
      final request = RegisterRequest(
        email: email,
        password: password,
        username: '', // Backend doesn't use username, use empty string
        fullName: fullName,
      );
      await AuthService.register(request);
      
      // Registration successful, don't auto-login
      // User should manually login after registration
      state = state.copyWith(isLoading: false, error: null);
      return true;
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
      return false;
    }
  }

  Future<void> logout() async {
    print('DEBUG AUTH - logout() called');
    state = state.copyWith(isLoading: true);
    
    try {
      // Clear both storage systems
      await _storage.delete(key: _tokenKey);
      await _storage.delete(key: _userKey);
      await JwtStorage.clearAll();
      
      print('DEBUG AUTH - Storage cleared, setting empty state');
      state = const AuthState();
      print('DEBUG AUTH - After logout - isAuthenticated: ${state.isAuthenticated}');
    } catch (e) {
      print('DEBUG AUTH - logout error: $e');
      state = state.copyWith(
        isLoading: false,
        error: 'L·ªói khi ƒëƒÉng xu·∫•t: ${e.toString()}',
      );
    }
  }

  // Set auth state for 2FA login
  void setAuthState(User user, String token) {
    state = AuthState(
      user: user,
      token: token,
      isLoading: false,
      error: null,
    );
  }


  // Biometric login with account selection support
  Future<Map<String, dynamic>> loginWithBiometrics() async {
    try {
      final localAuth = LocalAuthentication();
      final isSupported = await localAuth.isDeviceSupported();
      final canCheck = await localAuth.canCheckBiometrics;
      if (!isSupported || !canCheck) return {'success': false, 'error': 'Biometric not supported'};

      final didAuthenticate = await localAuth.authenticate(
        localizedReason: 'X√°c th·ª±c sinh tr·∫Øc h·ªçc ƒë·ªÉ ƒëƒÉng nh·∫≠p',
        options: const AuthenticationOptions(
          biometricOnly: true,
          stickyAuth: true,
        ),
      );

      if (!didAuthenticate) return {'success': false, 'error': 'Authentication failed'};

      // T·∫°o template c·ªë ƒë·ªãnh (gi·ªëng nh∆∞ khi ƒëƒÉng k√Ω)
      final template = await _generateBiometricTemplate();
      print('üîê DEBUG: Template ƒëƒÉng nh·∫≠p = $template');

      // Ki·ªÉm tra c√≥ nhi·ªÅu t√†i kho·∫£n kh√¥ng
      final result = await AuthService.loginBiometricWithSelection(template);
      
      if (result['multipleAccounts'] == true) {
        // C√≥ nhi·ªÅu t√†i kho·∫£n - tr·∫£ v·ªÅ danh s√°ch ƒë·ªÉ UI hi·ªÉn th·ªã
        return {
          'success': false,
          'needsSelection': true,
          'accounts': result['accounts'],
          'template': template,
        };
      } else {
        // Ch·ªâ c√≥ 1 t√†i kho·∫£n - ƒëƒÉng nh·∫≠p lu√¥n
        final response = AuthResponse.fromJson(result);
        await _saveAuthData(response);
        
        // Ki·ªÉm tra 2FA sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        final needs2FA = await _check2FARequired();
        if (needs2FA) {
          return {
            'success': false,
            'needs2FA': true,
            'message': 'C·∫ßn x√°c th·ª±c 2 l·ªõp ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng nh·∫≠p'
          };
        }
        
        return {'success': true};
      }
    } catch (e) {
      return {'success': false, 'error': e.toString()};
    }
  }


  Future<void> _saveAuthData(AuthResponse response) async {
    await _storage.write(key: _tokenKey, value: response.token);
    await _storage.write(key: _userKey, value: response.user.toJson().toString());
    await JwtStorage.saveToken(response.token);
    await JwtStorage.saveUserId(response.user.userId);
    state = AuthState(user: response.user, token: response.token);
  }

  // Check if user needs 2FA after biometric login
  Future<bool> _check2FARequired() async {
    try {
      final status = await TwoFactorService.get2FAStatus();
      return status.twoFactorEnabled;
    } catch (e) {
      print('‚ùå DEBUG: L·ªói ki·ªÉm tra 2FA status: $e');
      return false;
    }
  }

  // Complete 2FA after biometric login
  Future<bool> complete2FAAfterBiometric(String totpCode) async {
    try {
      final response = await TwoFactorService.complete2FABiometric(totpCode);
      
      // Update auth state
      final user = User.fromJson({
        'id': response.user.id,
        'email': response.user.email,
        'displayName': response.user.displayName,
        'role': response.user.role,
        'bioAuthEnabled': response.user.twoFactorEnabled,
        'createdAt': DateTime.now().toIso8601String(),
        'updatedAt': DateTime.now().toIso8601String(),
      });
      
      setAuthState(user, response.token);
      return true;
    } catch (e) {
      print('‚ùå DEBUG: L·ªói ho√†n t·∫•t 2FA: $e');
      return false;
    }
  }

  // ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n ƒë√£ ch·ªçn
  Future<Map<String, dynamic>> loginWithSelectedAccount(String template, String accountId) async {
    try {
      final response = await AuthService.loginBiometricAccount(template, accountId);
      await _saveAuthData(response);
      
      // Ki·ªÉm tra 2FA sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
      final needs2FA = await _check2FARequired();
      if (needs2FA) {
        return {
          'success': false,
          'needs2FA': true,
          'message': 'C·∫ßn x√°c th·ª±c 2 l·ªõp ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng nh·∫≠p'
        };
      }
      
      return {'success': true};
    } catch (e) {
      print('‚ùå DEBUG: L·ªói ƒëƒÉng nh·∫≠p t√†i kho·∫£n ƒë√£ ch·ªçn: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  // ƒêƒÉng k√Ω v√¢n tay cho user hi·ªán t·∫°i
  Future<bool> registerBiometrics() async {
    try {
      print('üîç DEBUG: B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω v√¢n tay');
      
      if (state.token == null) {
        print('‚ùå DEBUG: Kh√¥ng c√≥ token');
        throw Exception('Kh√¥ng c√≥ token x√°c th·ª±c');
      }

      print('‚úÖ DEBUG: C√≥ token, b·∫Øt ƒë·∫ßu ki·ªÉm tra thi·∫øt b·ªã');
      final localAuth = LocalAuthentication();
      
      print('üîç DEBUG: Ki·ªÉm tra h·ªó tr·ª£ sinh tr·∫Øc h·ªçc...');
      final isSupported = await localAuth.isDeviceSupported();
      print('üì± DEBUG: isSupported = $isSupported');
      
      if (!isSupported) {
        print('‚ùå DEBUG: Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ sinh tr·∫Øc h·ªçc');
        throw Exception('Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ sinh tr·∫Øc h·ªçc');
      }
      
      print('üîç DEBUG: Ki·ªÉm tra c√≥ th·ªÉ x√°c th·ª±c...');
      final canCheck = await localAuth.canCheckBiometrics;
      print('üîê DEBUG: canCheck = $canCheck');
      
      if (!canCheck) {
        print('‚ùå DEBUG: Ch∆∞a ƒëƒÉng k√Ω v√¢n tay trong h·ªá th·ªëng');
        throw Exception('Ch∆∞a ƒëƒÉng k√Ω v√¢n tay trong c√†i ƒë·∫∑t h·ªá th·ªëng');
      }

      print('‚úÖ DEBUG: Thi·∫øt b·ªã OK, b·∫Øt ƒë·∫ßu x√°c th·ª±c v√¢n tay...');
      final didAuthenticate = await localAuth.authenticate(
        localizedReason: 'X√°c th·ª±c v√¢n tay ƒë·ªÉ li√™n k·∫øt v·ªõi t√†i kho·∫£n n√†y',
        options: const AuthenticationOptions(
          biometricOnly: true,
          stickyAuth: true,
        ),
      );

      print('üîê DEBUG: K·∫øt qu·∫£ x√°c th·ª±c = $didAuthenticate');
      if (!didAuthenticate) {
        print('‚ùå DEBUG: X√°c th·ª±c v√¢n tay th·∫•t b·∫°i');
        throw Exception('X√°c th·ª±c v√¢n tay th·∫•t b·∫°i');
      }

      print('‚úÖ DEBUG: X√°c th·ª±c th√†nh c√¥ng, t·∫°o template...');
      final template = await _generateBiometricTemplate();
      print('üéØ DEBUG: Template m·ªõi = $template');

      print('üåê DEBUG: G·ª≠i template l√™n server...');
      await AuthService.registerBiometric(state.token!, template);
      print('‚úÖ DEBUG: ƒêƒÉng k√Ω th√†nh c√¥ng!');
      
      // C·∫≠p nh·∫≠t state ƒë·ªÉ bioAuthEnabled = true
      if (state.user != null) {
        final userJson = state.user!.toJson();
        userJson['bioAuthEnabled'] = true;
        final updatedUser = User.fromJson(userJson);
        state = state.copyWith(user: updatedUser);
        print('üîÑ DEBUG: ƒê√£ c·∫≠p nh·∫≠t bioAuthEnabled = true');
      }
      
      return true;
    } catch (e) {
      print('‚ùå DEBUG: L·ªói chi ti·∫øt: $e');
      print('‚ùå DEBUG: Stack trace: ${StackTrace.current}');
      return false;
    }
  }

  // X√≥a v√¢n tay ƒë√£ ƒëƒÉng k√Ω
  Future<bool> removeBiometrics() async {
    try {
      print('üóëÔ∏è DEBUG: B·∫Øt ƒë·∫ßu x√≥a v√¢n tay');
      
      if (state.token == null) {
        print('‚ùå DEBUG: Kh√¥ng c√≥ token');
        return false;
      }
      
      print('üåê DEBUG: G·ª≠i request x√≥a v√¢n tay l√™n server...');
      await AuthService.removeBiometric(state.token!);
      print('‚úÖ DEBUG: X√≥a v√¢n tay th√†nh c√¥ng!');
      
      // C·∫≠p nh·∫≠t state ƒë·ªÉ bioAuthEnabled = false
      if (state.user != null) {
        final userJson = state.user!.toJson();
        userJson['bioAuthEnabled'] = false;
        final updatedUser = User.fromJson(userJson);
        state = state.copyWith(user: updatedUser);
        print('üîÑ DEBUG: ƒê√£ c·∫≠p nh·∫≠t bioAuthEnabled = false');
      }
      
      return true;
    } catch (e) {
      print('‚ùå DEBUG: L·ªói x√≥a v√¢n tay: $e');
      return false;
    }
  }

  // T·∫°o template unique d·ª±a tr√™n th√¥ng tin v√¢n tay th·ª±c t·∫ø
  Future<String> _generateBiometricTemplate() async {
    // Template ƒë∆∞·ª£c t·∫°o t·ª´ th√¥ng tin C·ªê ƒê·ªäNH:
    // 1. Device ID c·ªë ƒë·ªãnh (ƒë·ªÉ c√πng thi·∫øt b·ªã c√≥ c√πng template)
    // 2. Th√¥ng tin thi·∫øt b·ªã
    // KH√îNG ph·ª• thu·ªôc v√†o user v√¨ c√≥ th·ªÉ ch∆∞a ƒëƒÉng nh·∫≠p
    final deviceId = await _getDeviceId();
    
    // T·∫°o hash c·ªë ƒë·ªãnh t·ª´ th√¥ng tin device
    final combined = 'device_${deviceId}';
    final hash = combined.hashCode.abs().toString();
    
    print('üîß DEBUG: Device ID = $deviceId');
    print('üîß DEBUG: Combined = $combined');
    print('üîß DEBUG: Hash = $hash');
    
    // T·∫°o template v·ªõi format: bio_device_hash
    return 'bio_$hash';
  }


  // L·∫•y device ID (gi·∫£ l·∫≠p)
  Future<String> _getDeviceId() async {
    // Trong th·ª±c t·∫ø s·∫Ω l·∫•y device ID th·∫≠t
    // Hi·ªán t·∫°i t·∫°o m·ªôt ID c·ªë ƒë·ªãnh cho demo
    return 'device_12345';
  }

  Future<void> updateProfile(Map<String, dynamic> data) async {
    if (state.token == null) return;
    
    state = state.copyWith(isLoading: true, error: null);
    
    try {
      final updatedUser = await AuthService.updateProfile(state.token!, data);
      await _storage.write(key: _userKey, value: updatedUser.toJson().toString());
      
      state = state.copyWith(
        user: updatedUser,
        isLoading: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }

  void clearError() {
    state = state.copyWith(error: null);
  }
}

// Auth provider
final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  final storage = ref.watch(secureStorageProvider);
  return AuthNotifier(storage);
});

// Token provider for easy access
final authTokenProvider = Provider<String?>((ref) {
  return ref.watch(authProvider).token;
});

// User provider for easy access
final currentUserProvider = Provider<User?>((ref) {
  return ref.watch(authProvider).user;
});

// Auth loading provider
final authLoadingProvider = Provider<bool>((ref) {
  return ref.watch(authProvider).isLoading;
});

// Auth error provider
final authErrorProvider = Provider<String?>((ref) {
  return ref.watch(authProvider).error;
});

// Is authenticated provider
final isAuthenticatedProvider = Provider<bool>((ref) {
  return ref.watch(authProvider).isAuthenticated;
});